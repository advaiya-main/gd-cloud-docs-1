<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:mso="urn:schemas-microsoft-com:office:office" xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882">

<head>

<!--Article Number is 18268-->


<title>Install and configure Django CMS - Ubuntu, Debian</title>
<style type='text/css'>
div.hacker {
background-color:#666;
border:1px solid #ccc;
color:#fff;
font-family:"Lucida Console","Courier New",Courier,fixed;  font-size:95%;  line-height:160%;  margin-bottom:1.5em;  padding:10px; }

p.note {
 background-color:#ffffe6;
 border:1px solid #eee;
 color:#666;
 padding:.8em 1.6em;
 margin:15px 0;
}

.warning {
 border: 1px #d25100 solid;
 padding: .5em 1em .5em 4em;
 margin: 10px 20px 15px 20px;
 background-image: url('@{help-img-path}/img_warning.gif');
 background-repeat: no-repeat;
 background-position: left top;
 background-color: #ededed;-moz-border-radius:
0.8em;-webkit-border-radius: 0.8em;
 /* -moz-border-bottom-radius: 0;9 */
 -webkit-border-bottom-radius: 0;
 padding-top:14px;
 padding-bottom:15px;
}
</style>


<!--[if gte mso 9]><xml>
<mso:CustomDocumentProperties>
<mso:ArticleKeywords msdt:dt="string">CMS, Django, Python</mso:ArticleKeywords>
<mso:Reference msdt:dt="string">https://www.digitalocean.com/community/tutorials/how-to-set-up-and-install-django-cms-on-a-CentoOS -7-or-ubuntu-13-vps, https://www.digitalocean.com/community/tutorials/how-to-set-up-and-install-django-cms-on-a-CentoOS -7-or-ubuntu-13-vps</mso:Reference>
<mso:LinuxDistributions msdt:dt="string">;#CentOS;#Fedora;#</mso:LinuxDistributions>
<mso:ArticlePriority msdt:dt="string">4</mso:ArticlePriority>
<mso:RequestNotes msdt:dt="string"></mso:RequestNotes>
<mso:Difficulty msdt:dt="string">3</mso:Difficulty>
<mso:ForkSplit msdt:dt="string"></mso:ForkSplit>
<mso:ArticleID msdt:dt="string">18267</mso:ArticleID>
<mso:UnsupportedFeatures msdt:dt="string"></mso:UnsupportedFeatures>
<mso:Collapsed msdt:dt="string"></mso:Collapsed>
<mso:Complexity msdt:dt="string"></mso:Complexity>
<mso:ArticleStatus msdt:dt="string">Drafting in progress</mso:ArticleStatus>
<mso:HoursDraftingEstimated msdt:dt="string">4.00000000000000</mso:HoursDraftingEstimated>
<mso:HoursEditingEstimated msdt:dt="string">0.500000000000000</mso:HoursEditingEstimated>
<mso:Sample msdt:dt="string">z</mso:Sample>
<mso:DeliveryTarget msdt:dt="string">Phase 2</mso:DeliveryTarget>
<mso:EditScore msdt:dt="string"></mso:EditScore>
<mso:PrereqOrdering msdt:dt="string">2</mso:PrereqOrdering>
<mso:Week msdt:dt="string">8.00000000000000</mso:Week>
<mso:ReviewComments msdt:dt="string"></mso:ReviewComments>
<mso:Dependencies msdt:dt="string"></mso:Dependencies>
<mso:AssignedTo1 msdt:dt="string">39</mso:AssignedTo1>
<mso:display_urn_x003a_schemas-microsoft-com_x003a_office_x003a_office_x0023_AssignedTo1 msdt:dt="string">Conrad James</mso:display_urn_x003a_schemas-microsoft-com_x003a_office_x003a_office_x0023_AssignedTo1>
<mso:TestComments msdt:dt="string"></mso:TestComments>
<mso:display_urn_x003a_schemas-microsoft-com_x003a_office_x003a_office_x0023_ReviewedBy msdt:dt="string">Carla  Johnson</mso:display_urn_x003a_schemas-microsoft-com_x003a_office_x003a_office_x0023_ReviewedBy>
<mso:ReviewedBy msdt:dt="string">41</mso:ReviewedBy>
</mso:CustomDocumentProperties>
</xml><![endif]-->
</head>

<body>
            <p>Describes how to install Django CMS on a Debian and Ubuntu Linux VPS.</p>

<h1>Install and Configure Django CMS - CentOS, Fedora Linux</h1>

                <p><strong>Difficulty</strong>: <em><u>4</u></em><br/>
                <strong>Time</strong>: <em><u>4.00</u></em></p>
<!--Missing difficulty and time-->

                <p><b>Django CMS</b>is one of the content management systems that is geared towards working with Django framework based web applications, we will walk you through installing Django CMS on a CentOS, Fedora Linux VPS, ready to be configured and used. </p>
                <p>Django CMS comes with a relatively straight forward and quite rich documentation for development which will be more than enough to get you going after completing this tutorial. You can access the latest version on the                               <a href="http://docs.django-cms.org/en/2.4.2/getting_started/tutorial.html">Django CMS web site</a>.</p>


<h2>Introduction</h2>

<h3>Installing Django CMS</h3>


            <p><b>Python Package Manager: pip:</b> pip is a package manager which will help us to install the software packages (tools, libraries, applications).   </p>


            <p><b>Python Package Distribution Utility: setuptools: </b>A dependency of pip, setuptools library builds on the functionality of Python's standard software distribution utilities toolset distutils.  </p>


            <p><b>Virtual Python Environment Builder: virtualenv</b> The virtualenv tool is here to isolate our Django CMS application repository and its complex dependencies from the rest of the system, allowing us to have everything in order, easing maintenance at the same time</p>  <br/>


<h2>Update and Configure the VPS</h2>

<h3>Prepare the Operating System</h3>

                    <p class="note">Please Note: We will be using a freshly created VPS for this article. This prevents any possible software related or security issues from the past installations. </p>
    <ol>
                <li>First we will start with upgradng the software repository list followed by upgrading the installed tools on our machine to more recent versions:
                        <div class="hacker">sudo aptitude update
                                            sudo aptitude upgrade</div></li>

                <li>We can now continue with installing other software tools and libraries that we will need along the way. <br />
                    Here is what we will need:
            <ul>
                            <li><b>python-dev:</b> This package extends the default Python installation on our system.</li>
                            <li><b>libjpeg-dev/libpng-dev:</b> These libraries will be needed for image processing with Python imaging library.</li>
                            <li><b>libpq-dev:</b> The libpq's (PostgreSQL) development version, which we will need further later on in the tutorial.</li>
            </ul> <br/>
                To download and install, run the following command:
                        <div class="hacker">sudo aptitude install libpq-dev python-dev libjpeg-dev libpng-dev</div>
                Once the package manager is updated you will install the Virtual Environment.</li>
        </ol>

<h2>Install the Virtual Environment</h2>

                 <p>Everything we need runs on Python. Default Debian 7 installation comes with Python version 2.7. As this suits our requirements, we can continue with installing pip, which we need for the virtualenv (and other packages') installation.<br/>
                    Before getting pip, we first need to install its dependency: <b>setuptools</b>.</p>

<h3>Install setuptools:</h3>
        <ul>
                <li>Use a command called curl to securely get these files. These setup files will not only allow us to have the installation process automated, but also ensures that we have the latest stable versions running on our system. curl here will verify the SSL certificates from the source and pass the data to the Python interpreter. <br/>
                Run the following command
                        <div class="hacker">$ curl http://pypi.python.org/pypi/setuptools</div>
                We can now install and set up pip on our system.</li>
        </ul>

<h3>Install pip:</h3>

        <ol>
                <li>Let's use curl again to have it securely downloaded and installed. Run the following:
                            <div class="hacker">$ sudo yum install python-pip</div></li>

                <li>By default, pip installs its files under <code>/usr/local/bin location</code>. We need to append it to our PATH so that we will be able to run it with calling pip command directly.
                            <div class="hacker">export PATH="/usr/local/bin:$PATH"</div>
                    As we have pip the package manager, all installations from now on are as easy as <code>pip install package-name</code>. However, as we want the latest stable release of virtualenv, we are going to provide pip with the address. </li>
        </ol>


<h3>Install virtualenv:</h3>

        <ul>
                <li>Run the following to have pip install virtualen install virtualenv system-wide.
                        <div class="hacker">sudo pip install virtualenv</div></li>
        </ul>


<h2>Preparing our Virtual Environment (venv) for Django CMS</h2>

        <ol>
                <li>All the tools we need are ready and we can begin preparing the virtual environment where our Django CMS project is going to reside.<br/>
                Let's start with initiating a venv (virtual environment) called <code>"project_cms"</code> using virtualenv and go to the project's folder.

                        <div class="hacker">svirtualenv project_cms <br />
                        virtualenv project_cms  <br />
                        cd project_cms      <br /></div>

                        <p class="note">"We chose <code>project_cms</code> as the project repository's folder name. You can change it as you wish, keep in mind that choosing an unrelated name could cause trouble in the future with maintenance.</p> </li>

                <li>Upon creating a virtualenv, you need to activate it in order to use it.
                        <div class="hacker">source bin/activate </div>

                <p class="note">Note: Upon activation, in order to deactivate, simply run the command deactivate when needed. </p></li>
        </ol>

<h2>Setting up Django CMS Dependencies</h2>

<h3>Install pillow (drop-in pil replacement):</h3>

        <ul>
                <li>Run the following to have pillow downloaded and installed:
                    <div class="hacker">project_cms$ pip install pillow</div>
                    <p class="note">Note: As we have our venv activated, this will not be a system-wide installation.</p> </li>
        </ul>


<h3>Installing database drivers</h3>

        <ul>
                <li>The PostgreSQL database adapter which is used by Django is called psycopg2. It needs libpq-dev library installed and we recommend installing it in the beginning:
                    <div class="hacker">project_cms$ pip install psycopg2</div>

                Since our virtualenv is activated, this will not be a system-wide installation.<br/>

                For more on <code>psycopg2</code>, you can visit <a href="http://initd.org/psycopg/docs/faq.html">http://initd.org/psycopg/docs/faq.html</a>.

                    <p class="note">Please note: These commands ready PostgreSQL for Django but does not give you a fully configured installation. If you choose to work
                    with PostgreSQL and you need further instructions on Django, you may wish to visit the following DigitalOcean tutorial on the exact subject by clicking here.
                    Below we are using an SQLite database. You should also modify that setting to work with your PostgreSQL installation if you decide to use it. </p> </li>

        </ul>

<h2>Installing and Setting up Django CMS</h2>

<h3>Installing Django CMS</h3>

        <ul>
                <li>Django CMS comes with a number of other dependencies we yet need to install.Simply run the following to conclude the installations:<br/>
                    <div class="hacker">project_cms$ pip install django-cms</div>

                We now have everything installed: <code>Django, django-classy-tags, south, html5lib, django-mptt, django-sekizai.</code></li>

        </ul>

<h3>Setting up Django CMS</h3>

                <p>Creating a Django CMS project consists of two parts. First, we will start a regular Django project in our virtual environment and then continue with setting it up to have it working as Django CMS.
                    Let's begin with creating the Django project. We will name it <b>dev_cms </b>, you can choose it to suit your needs.</p>

        <ol>
                <li>Simply run the following:
                      <div class="hacker">project_cms$ django-admin.py startproject dev_cms <br />
                      project_cms$ cd dev_cms </div> </li>

                <li>You will see that our project is created. In order to test the installation before continuing with the configuration part,
                 let's run the following to start a simple development server which we can access from the outside:
                      <div class="hacker">project_cms$ python manage.py runserver 0.0.0.0:8000 </div> </li>

                <li>Visit the URL from your browser, replacing <code>0.0.0.0</code> with your server's IP address.</li>
        </ol>


<h3>Finalizing setup</h3>

         <ol>

        <li>Most of the configurations for Django CMS takes place inside the <code>settings.py</code> file located inside the project folder.  <br />
        Open it with your favourite editor. In this tutorial, we will be using <code>vim</code>. <br />
        <code>project_cms$ vim dev_cms/settings.py</code> <br/>  </li>

        <li>Add the following lines to the top of the file under the highlighted sentence in the file:  <br />  <br />
        <code># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</code> <br/>
        <br/>
        <code>import os</code> <br/>
        <br />
        <code>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</code> <br />  </li>


        <li>Let's begin with the <b>INSTALLED_APPS</b> section. there is an existing list of modules, append the names of a few more which we've already installed, including the Django CMS module itself.
        As stated on the Django CMS documentation:<br/>

       Add the following apps to your INSTALLED_APPS (under the highlighted portion). This includes django CMS itself as well as its dependenices and other highly recommended applications/libraries:

            <div class="hacker">
<pre>INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
  'cms',     # django CMS itself
  'mptt',    # utilities for implementing a modified pre-order traversal tree
  'menus',   # helper for model independent hierarchical website navigation
  'south',   # intelligent schema and data migrations
  'sekizai', # for javascript and css management
)
  </pre></div>

            <p class="note"> Please note: Before moving on, make sure to uncomment django.contrib.admin from the list as well. That module is needed for the setup procedure.</p></li>

        <li>Next, let's find <code>MIDDLEWARE_CLASSES</code> and add the following to the bottom of the list:


            <div class="hacker">'cms.middleware.page.CurrentPageMiddleware', <br />
                                'cms.middleware.user.CurrentUserMiddleware', <br />
                                'cms.middleware.toolbar.ToolbarMiddleware',  <br />
                                'cms.middleware.language.LanguageCookieMiddleware', </div>    <br/> </li>

        <li>Afterwards your MIDDLEWARE_CLASSES should look similar to:     <br />

            <div class="hacker">MIDDLEWARE_CLASSES = (                          <br />
                                'django.middleware.common.CommonMiddleware',      <br />
                                'django.contrib.sessions.middleware.SessionMiddleware',    <br />
                                'django.middleware.csrf.CsrfViewMiddleware',       <br />
                                'django.contrib.auth.middleware.AuthenticationMiddleware',     <br />
                                'django.contrib.messages.middleware.MessageMiddleware',       <br />
                                # Uncomment the next line for simple clickjacking protection:   <br />
                                # 'django.middleware.clickjacking.XFrameOptionsMiddleware',    <br />
                                'cms.middleware.page.CurrentPageMiddleware',      <br />
                                'cms.middleware.user.CurrentUserMiddleware',     <br />
                                'cms.middleware.toolbar.ToolbarMiddleware',     <br />
                                'cms.middleware.language.LanguageCookieMiddleware', <br />
                                ) </div>    </li>


        <li>As stated in the Django CMS documentation, we need to add a missing piece of settings code block to the file. It does not exist in <code>settings.py</code> . Copy-and-paste the block to a free location in the file:

            <div class="hacker">TEMPLATE_CONTEXT_PROCESSORS = (  <br />
                                'django.contrib.auth.context_processors.auth',  <br />
                                'django.core.context_processors.i18n',      <br />
                                'django.core.context_processors.request', <br />
                                'django.core.context_processors.media',   <br />
                                'django.core.context_processors.static',  <br />
                                'cms.context_processors.media',        <br />
                                'sekizai.context_processors.sekizai',  <br />
                                )  </div>  </li>


        <li>Now let's find and modify the <code>STATIC_ROOT</code> and <code>MEDIA_ROOT</code>directives similar to the following:

            <div class="hacker">MEDIA_ROOT = os.path.join(PROJECT_PATH, "media") <br />
                                MEDIA_URL = "/media/" <br />
                                 <br />
                                STATIC_ROOT = os.path.join(PROJECT_PATH, "static")  <br />
                                STATIC_URL = "/static/" </div>   </li>


        <li>Continue with modifying the <code>TEMPLATE_DIRS</code> directive to:

            <div class="hacker">TEMPLATE_DIRS = ( <br />
                                os.path.join(PROJECT_PATH, "templates"), <br />
                                ) </div>  </li>


        <li>Add the following code block to the file, amending it as necessary to suit your needs:
            <div class="hacker"> CMS_TEMPLATES = (     <br />
                                ('template_1.html', 'Template One'),
                                )    <br /> </div>      </li>



        <li>We need to set the translation languages as well. Add the following code block:
            <div class="hacker">LANGUAGES = [  <br />
                                ('en-us', 'English'),    <br />
                                ]     </div>   </li>

        <li>Finally let's define a database engine. You can modify the DATABASES setting to work with PostgreSQL as shown or use the following to have SQLite database set up temporarily:

            <div class="hacker"> DATABASES = {  <br />
                                'default': {     <br />
                                'ENGINE': 'django.db.backends.sqlite3', <br />
                                'NAME': os.path.join(PROJECT_PATH, 'database.sqlite'), <br />
                                }    <br />
                                }  </div>  </li>


         <li>We are done with the settings.py . We can save and close it. (Press CTRL+X and type Y to save and close).
            We need to define routes for our project.  <br />
            We will do this by editing <b>urls.py file:</b>

            <div class="hacker">project_cms$ vim dev_cms/urls.py</div> </li>

         <li>Replace the document with the following code snippet:

            <div class="hacker">from django.conf.urls.defaults import *  <br />
                                from django.conf.urls.i18n import i18n_patterns   <br />
                                from django.contrib import admin  <br />
                                from django.conf import settings  <br /> <br />

                                admin.autodiscover()  <br /> <br />

                                urlpatterns = i18n_patterns('',  <br />
                                    url(r'^admin/', include(admin.site.urls)),v
                                    url(r'^', include('cms.urls')),   <br />
                                )    <br /> <br />

                                if settings.DEBUG:  <br />
                                    urlpatterns += patterns('',  <br />
                                    url(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', <br />
                                        {'document_root': settings.MEDIA_ROOT, 'show_indexes': True}), v
                                    url(r'', include('django.contrib.staticfiles.urls')), <br />
                                ) + urlpatterns   </div>


                <p class="note">Please note that the last conditional created in the above snippet slightly differs from the Django CMS introductory settings, whereby <code>urlpatterns = patterns(</code> is replaced with <code>urlpatterns += patterns(</code> to fix the problem of overriding <code> urlpatterns </code>set above. <br />  </p> </li>


        <li>Again press CTRL+X and type Y to save and close. </li>

        <li>Execute the following commands to synchronise database according to our settings:

            <div class="hacker">project_cms$ python manage.py syncdb --all <br />
                                project_cms$ python manage.py migrate --fake </div></li>


        <li>If you see "Installation okay", it means everything is fine and we can try it on the test server before continuing with building on our Django CMS project. <br />
            Let's run the server again:

            <div class="hacker"> project_cms$ python manage.py cms check</div> </li>


        <li>If you see "Installation okay", it means everything is fine and we can try it on the test server before continuing with building on our Django CMS project.  <br />
           Let's run the server again:

           <div class="hacker">project_cms$ python manage.py runserver 0.0.0.0:8000</div>  </li>
    </ol>

        <p>For further instructions, tutorials and documentation you can visit <a href="http://docs.django-cms.org/en/2.4.2/">http://docs.django-cms.org/en/2.4.2/</a>. To get more support on Django CMS, you can visit the support page located at <a href="https://www.django-cms.org/en/suppor">https://www.django-cms.org/en/support/</a>.</p>


</body>
</html>
